{
  "id" : 10755959,
  "description" : "Captures process details (CPU, Memory, status) for Linux via SSH.",
  "group" : "_WeenigWare",
  "appliesTo" : "hasCategory(\"Linux_SSH\") && Linux_SSH_Processes_Select.includeRegEx && Linux_SSH_Processes_Select.excludeRegEx",
  "technology" : "ssh.user && ssh.pass need to contain valid credentials.\nssh.prompt can contain a regex that will match on the prompt. If this property doesn't exist, it will look for the \"#\". If \"#\" is contained in the output of \"ps aux\", this will fail and a different prompt should be entered.\nWritten by Stuart Weenig",
  "tags" : "",
  "checksum" : "6d54a6f64b6ba72066df0cafbd24fbcf",
  "lineageId" : "2BJexzfXSE6WW5fz8E62qA",
  "name" : "Linux_SSH_Processes_Select",
  "displayName" : "Processes",
  "version" : 1580400820,
  "auditVersion" : 0,
  "hasMultiInstances" : true,
  "collectInterval" : 180,
  "collectMethod" : "batchscript",
  "collectorAttribute" : {
    "name" : "batchscript",
    "linuxCmdline" : "",
    "linuxScript" : "",
    "groovyScript" : "/*******************************************************************************\n *  © 2007-2020 - LogicMonitor, Inc. All rights reserved.\n ******************************************************************************/\nimport com.jcraft.jsch.JSch\nimport com.santaba.agent.util.Settings\nhost = hostProps.get(\"system.hostname\")\nuser = hostProps.get(\"ssh.user\")\npass = hostProps.get(\"ssh.pass\")\nport = hostProps.get(\"ssh.port\") ?: 22\ncert = hostProps.get(\"ssh.cert\") ?: '~/.ssh/id_rsa'\ntimeout = 15000 // timeout in milliseconds\ntry {\n  def output = getCommandOutput('ps aux').readLines()\n  output.subList(2,output.size()-2).each{line ->\n    e = line.tokenize(\" \")\n    println(\"${e[1]}.cpu: ${e[2]}\")\n    println(\"${e[1]}.mem: ${e[3]}\")\n    println(\"${e[1]}.vsz: ${e[4]}\")\n    println(\"${e[1]}.rss: ${e[5]}\")\n  }\n  return 0\n}\ncatch (Exception e) {println \"Unexpected Exception : \" + e; return 1}\n\ndef getCommandOutput(String input_command) {\n  try {\n    jsch = new JSch()\n    if (user && !pass) {jsch.addIdentity(cert)}\n    session = jsch.getSession(user, host, port)\n    session.setConfig(\"StrictHostKeyChecking\", \"no\")\n    String authMethod = Settings.getSetting(Settings.SSH_PREFEREDAUTHENTICATION, Settings.DEFAULT_SSH_PREFEREDAUTHENTICATION)\n    session.setConfig(\"PreferredAuthentications\", authMethod)\n    session.setTimeout(timeout)\n    if (pass) {session.setPassword(pass)}\n    session.connect()\n    channel = session.openChannel(\"exec\")\n    channel.setCommand(input_command)\n    def commandOutput = channel.getInputStream()\n    channel.connect()\n    def output = commandOutput.text\n    channel.disconnect()\n    return output\n  }\n  catch (Exception e) {e.printStackTrace()}\n  finally {session.disconnect()}\n}",
    "scriptType" : "embed",
    "windowsCmdline" : "",
    "windowsScript" : ""
  },
  "enableAutoDiscovery" : true,
  "autoDiscoveryConfig" : {
    "persistentInstance" : false,
    "disableInstance" : false,
    "deleteInactiveInstance" : false,
    "instanceAutoGroupMethod" : "ilp",
    "instanceAutoGroupMethodParams" : "auto.user",
    "scheduleInterval" : 15,
    "method" : {
      "name" : "ad_script",
      "type" : "embeded",
      "winScript" : null,
      "winCmdline" : null,
      "linuxCmdline" : null,
      "linuxScript" : null,
      "groovyScript" : "/*******************************************************************************\n *  © 2007-2020 - LogicMonitor, Inc. All rights reserved.\n ******************************************************************************/\nimport com.jcraft.jsch.JSch\nimport com.santaba.agent.util.Settings\nhost = hostProps.get(\"system.hostname\")\nuser = hostProps.get(\"ssh.user\")\npass = hostProps.get(\"ssh.pass\")\nport = hostProps.get(\"ssh.port\") ?: 22\ncert = hostProps.get(\"ssh.cert\") ?: '~/.ssh/id_rsa'\ntimeout = 15000 // timeout in milliseconds\ntry {\n  def userCmd = getCommandOutput('ps ax -o pid,user,tty')\n  users = userCmd.readLines().collectEntries{[it.tokenize(\" \")[0], [it.tokenize(\" \")[1],it.tokenize(\" \")[2]]]}\n  def processes = getCommandOutput('ps ax -o pid,command').readLines()\n  processes.subList(2,processes.size()-2).each{\n    e = it.tokenize(\" \")\n    pid = e[0]\n    command = e[1..e.size()-1].join(\" \")\n    print(\"${pid}##[${pid}]${command}######\")\n    print(\"pid=${pid}\")\n    if (users[pid]){\n      print(\"&tty=${users[pid][1]}\")\n      print(\"&user=${users[pid][0]}\")\n    } else {\n      print(\"&user=UnknownUser\")\n    }\n    print(\"\\n\")\n  }\n  return 0\n}\ncatch (Exception e) {println \"Unexpected Exception : \" + e; return 1}\n\ndef getCommandOutput(String input_command) {\n  try {\n    jsch = new JSch()\n    if (user && !pass) {jsch.addIdentity(cert)}\n    session = jsch.getSession(user, host, port)\n    session.setConfig(\"StrictHostKeyChecking\", \"no\")\n    String authMethod = Settings.getSetting(Settings.SSH_PREFEREDAUTHENTICATION, Settings.DEFAULT_SSH_PREFEREDAUTHENTICATION)\n    session.setConfig(\"PreferredAuthentications\", authMethod)\n    session.setTimeout(timeout)\n    if (pass) {session.setPassword(pass)}\n    session.connect()\n    channel = session.openChannel(\"exec\")\n    channel.setCommand(input_command)\n    def commandOutput = channel.getInputStream()\n    channel.connect()\n    def output = commandOutput.text\n    channel.disconnect()\n    return output\n  }\n  catch (Exception e) {e.printStackTrace()}\n  finally {session.disconnect()}\n}\n"
    },
    "filters" : [ {
      "attribute" : "##WILDALIAS##",
      "operation" : "RegexNotMatch",
      "value" : "##Linux_SSH_Processes_Select.excludeRegEx##",
      "comment" : "Processes to exclude, set as property on device."
    }, {
      "attribute" : "##WILDALIAS##",
      "operation" : "RegexMatch",
      "value" : "##LinuxSSHProcesses.includeRegEx##",
      "comment" : "Processes to include, set as property on device."
    } ]
  },
  "dataPoints" : [ {
    "id" : 15717,
    "dataSourceId" : 10755959,
    "name" : "cpu",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.cpu",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15718,
    "dataSourceId" : 10755959,
    "name" : "ExecutionTime",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 4,
    "maxDigits" : 4,
    "postProcessorMethod" : "none",
    "postProcessorParam" : "",
    "rawDataFieldName" : "responseTime",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15719,
    "dataSourceId" : 10755959,
    "name" : "memory",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.mem",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15720,
    "dataSourceId" : 10755959,
    "name" : "status",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "if (un(cpu),0,1)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15721,
    "dataSourceId" : 10755959,
    "name" : "rss",
    "description" : "Resident set size in bytes",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.rss",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15722,
    "dataSourceId" : 10755959,
    "name" : "vsz",
    "description" : "Virtual Set Size in bytes",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.vsz",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  } ],
  "enableEriDiscovery" : false,
  "eriDiscoveryInterval" : -1,
  "eriDiscoveryConfig" : null
}