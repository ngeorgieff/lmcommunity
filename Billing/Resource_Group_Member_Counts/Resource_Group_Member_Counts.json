{
  "id" : 8063628,
  "description" : "Gives group level count statistics: number of hosts, number of cloud resources, etc.",
  "group" : "_WeenigWare Billing",
  "appliesTo" : "billing_api.id && billing_api.pass && billing_api.account",
  "technology" : "Set Auto Discovery filter \"auto.depth <= 1\" to determine which group levels are included. Auto.depth represents the number of levels below the root the group resides.\nTo calculate valid costs, set billing_api.[aws|azure|gcp|resource]_cost properties on the collector where the billing api id, pass, and account are defined or on the instances themselves (if you wanted a different value per instance).\nSupporting documentation can be found at https://stuart.weenig.com/2019/11/counting-resources-per-group.html",
  "tags" : "",
  "checksum" : "8cf7843c840b79910a6a3e9434fa238c",
  "lineageId" : "6zDuWlhpQ9mACeDUx9LTcw",
  "name" : "Resource_Group_Member_Counts",
  "displayName" : "Resource Group Member Counts",
  "version" : 1586961656,
  "auditVersion" : 0,
  "hasMultiInstances" : true,
  "collectInterval" : 60,
  "collectMethod" : "batchscript",
  "collectorAttribute" : {
    "name" : "batchscript",
    "linuxCmdline" : "",
    "linuxScript" : "",
    "groovyScript" : "import org.apache.http.client.methods.HttpGet\nimport org.apache.http.impl.client.CloseableHttpClient\nimport org.apache.http.impl.client.HttpClients\nimport org.apache.http.util.EntityUtils\nimport javax.crypto.Mac\nimport javax.crypto.spec.SecretKeySpec\nimport org.apache.commons.codec.binary.Hex\nimport groovy.json.JsonSlurper\n\nCLIENTS_FOLDER_NAME = hostProps.get(\"billing_api.client_path\") ?: \"Fred Hutchinson Devices by Location\"\nBILLING_TYPES_PARENT_FOLDER_NAME = hostProps.get(\"billing_api.types_parent_path\") ?: \"Devices by Billing Type\"\n\naccessId = hostProps.get(\"billing_api.id\")\naccessKey = hostProps.get(\"billing_api.pass\")\naccount = hostProps.get(\"billing_api.account\")\nqueryLimit = hostProps.get(\"billing_api.query_limit\") ? hostProps.get(\"billing_api.query_limit\").toInteger() : 1000\n\ns = new JsonSlurper()\n\ndef LMAPI(_verb, _accessId, _accessKey, _account, _resourcePath, _queryParameters = [:], _data = '') {\n    url = 'https://' + _account + '.logicmonitor.com' + '/santaba/rest/' + _resourcePath\n    if (_queryParameters.size() > 0) {\n        _encodedQueryParameters = []\n        _queryParameters.each{k,v ->\n            _encodedQueryParameters += \"${k}=${java.net.URLEncoder.encode(v)}\"\n        }\n        url += \"?\" + _encodedQueryParameters.join(\"&\")\n    } else {url += \"/\"}\n    epoch = System.currentTimeMillis()\n    requestVars = _verb + epoch + \"/\" + _resourcePath\n    hmac = Mac.getInstance('HmacSHA256')\n    secret = new SecretKeySpec(_accessKey.getBytes(), 'HmacSHA256')\n    hmac.init(secret)\n    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))\n    signature = hmac_signed.bytes.encodeBase64()\n    CloseableHttpClient myHttpClient = HttpClients.createDefault()\n    http_request = new HttpGet(url)\n    http_request.addHeader(\"Authorization\" , \"LMv1 \" + _accessId + \":\" + signature + \":\" + epoch)\n    http_request.setHeader(\"X-Version\", \"2\")\n    response = myHttpClient.execute(http_request)\n    responseBody = EntityUtils.toString(response.getEntity())\n    code = response.getStatusLine().getStatusCode()\n    myHttpClient.close()\n    responseDict = [:]\n    responseDict['code'] = code ?: null\n    responseDict['body'] = responseBody ?: null\n    return responseDict\n}\n\ndef LmGet(String _resourcePath, Map _queryParameters = [:]){return LMAPI(\"GET\", accessId, accessKey, account, _resourcePath, _queryParameters)}\n\nqueryParameters = [\n'fields':'groupType,fullPath,id,numOfHosts,parentId,numOfAWSDevices,numOfAzureDevices,numOfDirectDevices,numOfDirectSubGroups,numOfGcpDevices',\n'sort':'+fullPath',\n'size':queryLimit.toString()\n]\ndata_json = LmGet(\"device/groups\",queryParameters)\ndata = s.parseText(data_json.body).items\ndata.each{\n  path = it.fullPath.tokenize(\"/\")\n  println(\"${it.id}.numOfHosts: ${it.numOfHosts}\")\n  println(\"${it.id}.numOfAWSDevices: ${it.numOfAWSDevices}\")\n  println(\"${it.id}.numOfAzureDevices: ${it.numOfAzureDevices}\")\n  println(\"${it.id}.numOfDirectDevices: ${it.numOfDirectDevices}\")\n  println(\"${it.id}.numOfDirectSubGroups: ${it.numOfDirectSubGroups}\")\n  println(\"${it.id}.numOfGcpDevices: ${it.numOfGcpDevices}\")\n}\n\nreturn 0",
    "scriptType" : "embed",
    "windowsCmdline" : "",
    "windowsScript" : ""
  },
  "enableAutoDiscovery" : true,
  "autoDiscoveryConfig" : {
    "persistentInstance" : false,
    "disableInstance" : false,
    "deleteInactiveInstance" : false,
    "instanceAutoGroupMethod" : "none",
    "instanceAutoGroupMethodParams" : "",
    "scheduleInterval" : 15,
    "method" : {
      "name" : "ad_script",
      "type" : "embeded",
      "winScript" : null,
      "winCmdline" : null,
      "linuxCmdline" : null,
      "linuxScript" : null,
      "groovyScript" : "import javax.crypto.Mac\nimport javax.crypto.spec.SecretKeySpec\nimport org.apache.commons.codec.binary.Hex\nimport groovy.json.JsonSlurper\n\nboolean ad = true\nboolean info = false\n\nMap credentials = [\n  \"id\"   : hostProps.get(\"billing_api.id\"),\n  \"key\"  : hostProps.get(\"billing_api.pass\"),\n  \"account\": hostProps.get(\"billing_api.account\")\n]\n\nMap resources = [\n  \"devices\": [\"path\": \"/device/groups\", \"details\": [\"fields\": \"id,fullPath,groupType,parentId\", \"sort\":\"+fullPath\"]],\n]\n\nif (credentials.account && credentials.id && credentials.key) {\n  resources.each() { k, v ->\n    Map headers = generate_headers(credentials.id, credentials.key, v.path)\n    if (headers) {\n      Map response = get_response(k, v, credentials.account, headers)\n      if (response?.success) {resources[k][\"data\"] = response.response}\n    }\n  }\n} else {\n  println(\"\"\"Device is not configured with the necessary portal credentials to proceed with API queries.\nPlease ensure that \\\"billing_api.id\\\", \\\"billing_api.pass\\\", and \\\"billing_api.account\\\" are set in the collector properties section!\nExiting Program...\"\"\")\n  return 1\n}\n\nMap groups = [:]\nresources.devices.data.each(){\n  groups[it.id] = [\"id\":it.id, \"fullPath\":it.fullPath, \"groupType\":it.groupType, \"parentId\":it.parentId]\n}\n\ngroups.each(){k, v ->\n  if (ad){\n    path = v.fullPath.tokenize(\"/\")\n    println(\"${v.id}##${(v.fullPath ?: \"(root)\").replaceAll(\"/\",\"-\")}######groupType=${v.groupType}&fullPath=${v.fullPath}&depth=${path.size()}\")\n  } else {\n    println(\"${v.id}.alarmCount: ${v.alarmCount}\")\n  }\n}\n\nreturn 0\n\ndef generate_headers(id, key, path) {\n  try {\n    // Create encryption signature for authorization request\n    Long epoch_time = System.currentTimeMillis()  // Get current system time (epoch time)\n    Mac hmac = Mac.getInstance(\"HmacSHA256\")\n    hmac.init(new SecretKeySpec(key.getBytes(), \"HmacSHA256\"))\n    signature = Hex.encodeHexString(hmac.doFinal(\"GET${epoch_time}${path}\".getBytes())).bytes.encodeBase64()\n    // return headers to main function\n    return [\"Authorization\": \"LMv1 $id:$signature:$epoch_time\", \"Content-Type\": \"application/json\"]\n  } catch (Exception err) {\n    // If error occurred, print the error message\n    println(\"ERROR: Unable to establish encryption for $path. Attempting next resource...\\n${err.message}\")\n  }\n}\n\ndef get_response(resource, parameters, account, headers) {\n  try {\n    boolean proceed = true  // Boolean used to determine if additional pagination is required\n    // Map to store query results for each endpoint.  Contains a list to store actual returned values and a boolean to determine if successful\n    Map results = [\"response\": [],\n             \"success\" : true]\n    add_query_parameters(resource, parameters)\n    // Add initial offset and size values to appropriate categories (skips metrics category since it's stagnate)\n    while (proceed) {\n      // Used for paginating through all availabe results.  Grabs 1000 at a time and moves offset if another query is required.\n      Map query = query_resource(account, parameters, headers)\n      // Query each API endpoint for a response (Should receive as Map)\n      // If the response was successful (including status and error messages), proceed to printing results\n      if (query && query?.data && query?.status == 200 && query?.errmsg?.toUpperCase() == \"OK\") {\n        if (resource != \"metrics\") {\n          results.response.addAll(query.data.items)   // Add all the data items found to our results map data list\n          if (query?.data?.items?.size() < parameters.details.size) {\n            // If we received less than 1000 results\n            proceed = false   // There is no need to execute another API query with a shifted offset\n          } else {    // Otherwise\n            parameters.details.offset += parameters.details.size\n            // Shift the offset to start 1000 numbers from current position\n          }\n        } else {\n          results.response = query.data   // Add all the data items found to our results map data list\n          proceed = false   // We've successfully queried all values.  End while loop\n        }\n      } else {\n        // If response was not successful, print eror message for each category that failed and continue to next endpoint\n        // If response error and status can be determined, print them.  Otherwise, use UNKNOWN\n        println(\"ERROR: Failed to query $resource API Endpoint...\\n\" +\n            \"${query?.errmsg?.toUpperCase() ?: 'UNKNOWN'} (STATUS: ${query?.status ?: 'UNKNOWN'})\")\n        results.success = false   // Set success value to false since we failed our API query\n        proceed = false   // End while loop because of failure and proceed to next endpoint\n      }\n    }\n    return results  // Return results to main function\n  } catch (Exception err) {\n    println(\"ERROR: Script failed while attempting to query $resource API endpoint...\\n${err?.message}\")\n  }\n}\n\ndef add_query_parameters(category, parameters) {\n  // Add size and offset field to map (only if collectors or admins category)\n  if (category != \"metrics\") {\n    Map query_details = [\"size\"  : 1000, \"offset\": 0]\n    // If there's already a details key in the details map\n    if (parameters.details) {\n      parameters.details << query_details\n      // Append the query details information to the pre-existing details map\n    } else {  // Otherwise, create a details key and assign it the query details map as a value\n      parameters.put(\"details\", query_details)\n    }\n  }\n}\n\ndef query_resource(account, details, headers) {\n  try {\n    // Configure request url from account, path, and authorization headers\n    String url = \"https://${account}.logicmonitor.com/santaba/rest${details.path}?${pack_parameters(details.details)}\"\n    // Return query response, converted from JSON to usable map\n    return new JsonSlurper().parseText(url.toURL().getText(useCaches: true, allowUserInteraction: false, requestProperties: headers))\n  } catch (Exception err) { // If error occurred, print the error message\n    println(\"ERROR: Unable to query ${details.path} for details.\\n${err.message}\")\n  }\n}\n\ndef pack_parameters(query_details) { // If additional query details are located in map, include them in url string\n  List pairs = []\n  query_details?.each { k, v -> pairs.add(\"${k}=${v}\")}\n  return pairs.join(\"&\")\n}\n"
    },
    "filters" : [ {
      "attribute" : "auto.fullPath",
      "operation" : "RegexNotMatch",
      "value" : "type|Minimal|My Devices",
      "comment" : ""
    }, {
      "attribute" : "auto.groupType",
      "operation" : "Equal",
      "value" : "Normal",
      "comment" : ""
    }, {
      "attribute" : "auto.depth",
      "operation" : "LessEqual",
      "value" : "2",
      "comment" : ""
    } ]
  },
  "dataPoints" : [ {
    "id" : 15632,
    "dataSourceId" : 8063628,
    "name" : "Total_Cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "aws_total_cost + azure_total_cost + gcp_total_cost + host_total_cost",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15634,
    "dataSourceId" : 8063628,
    "name" : "collection_time",
    "description" : "Measures the amount of time spent fetching data from the LM API.",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 4,
    "maxDigits" : 4,
    "postProcessorMethod" : "none",
    "postProcessorParam" : "",
    "rawDataFieldName" : "responseTime",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15635,
    "dataSourceId" : 8063628,
    "name" : "aws_count",
    "description" : "Total count of all AWS descendant instances.",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.numOfAWSDevices",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15636,
    "dataSourceId" : 8063628,
    "name" : "aws_total_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "aws_count * if(un(aws_unit_cost),0,aws_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15637,
    "dataSourceId" : 8063628,
    "name" : "azure_count",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.numOfAzureDevices",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15638,
    "dataSourceId" : 8063628,
    "name" : "azure_total_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "azure_count * if(un(azure_unit_cost),0,azure_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15641,
    "dataSourceId" : 8063628,
    "name" : "gcp_total_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "gcp_count * if(un(gcp_unit_cost),0,gcp_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15642,
    "dataSourceId" : 8063628,
    "name" : "gcp_count",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.numOfGcpDevices",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15643,
    "dataSourceId" : 8063628,
    "name" : "Total_Count",
    "description" : "Count of all descendants under the group.",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.numOfHosts",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15644,
    "dataSourceId" : 8063628,
    "name" : "host_total_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "host_count * if(un(host_unit_cost),0,host_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15650,
    "dataSourceId" : 8063628,
    "name" : "aws_unit_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "##billing_api.aws_cost##",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15651,
    "dataSourceId" : 8063628,
    "name" : "azure_unit_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "##billing_api.azure_cost##",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15652,
    "dataSourceId" : 8063628,
    "name" : "gcp_unit_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "##billing_api.gcp_cost##",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15653,
    "dataSourceId" : 8063628,
    "name" : "host_unit_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "##billing_api.resource_cost##",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15662,
    "dataSourceId" : 8063628,
    "name" : "host_count",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "Total_Count - aws_count - azure_count - gcp_count",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15664,
    "dataSourceId" : 8063628,
    "name" : "aws_unit_cost_display",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "if(un(aws_unit_cost),0,aws_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15665,
    "dataSourceId" : 8063628,
    "name" : "azure_unit_cost_display",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "if(un(azure_unit_cost),0,azure_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15666,
    "dataSourceId" : 8063628,
    "name" : "gcp_cost_display",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "if(un(gcp_unit_cost),0,gcp_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15667,
    "dataSourceId" : 8063628,
    "name" : "host_cost_display",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "if(un(host_unit_cost),0,host_unit_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  } ],
  "enableEriDiscovery" : false,
  "eriDiscoveryInterval" : -1,
  "eriDiscoveryConfig" : null
}