{
  "id" : 9263668,
  "description" : "restart service if needed. 1=already running, 2=first restart succeeded, 3=second try succeeded, 4=second try failed",
  "group" : "_WeenigWare",
  "appliesTo" : "isWindows() && Service_restart.services",
  "technology" : "Written by M. Suding. Updated by S. Weenig",
  "tags" : "suding",
  "checksum" : "06125cd0570c75605b404db7ee54b13f",
  "lineageId" : "4rSmC-KvTrOduMNflGMC9w",
  "name" : "Service_restart",
  "displayName" : "Services Monitored and Restarted if Needed",
  "version" : 1585341117,
  "auditVersion" : 0,
  "hasMultiInstances" : true,
  "collectInterval" : 60,
  "collectMethod" : "script",
  "collectorAttribute" : {
    "name" : "script",
    "linuxCmdline" : "",
    "linuxScript" : "",
    "groovyScript" : "$hostname = \"##HOSTNAME##\"\n$service = \"##WILDVALUE##\"\n$wait = 5 # seconds to wait\n\n#Stop-Service -InputObject $(Get-Service -Computer $hostname -Name $service)  # testing only\n#Start-Sleep 4  # testing only\n\n$service_status = (Get-Service -Name $service -ComputerName $hostname).Status\nWrite-Host \"$service is $service_status on $hostname\"\n\nif ((get-service -name $service -ComputerName $hostname).Status -eq \"Running\") {\n  write-host \"result_code: 1 (running)\"\n} else {\n  Write-Host \"not running so i will start then wait $wait seconds and test\"\n  Start-Service -InputObject $(Get-Service -Computer $hostname -Name $service)\n  Start-Sleep $wait\n\n  #Stop-Service -InputObject $(Get-Service -Computer $hostname -Name $service) # testing only\n  #Start-Sleep 4 # testing only\n\n  if ((get-service -name $service -ComputerName $hostname).Status  -eq \"Running\") {\n        write-host \"result_code: 2 (first restart worked)\"\n    } else {\n        Write-Host \"first restart failed so i will start second time\"\n        Start-Service -InputObject $(Get-Service -Computer $hostname -Name $service)\n        Start-Sleep $wait\n\n        #Stop-Service -InputObject $(Get-Service -Computer $hostname -Name $service) # testing only\n        #Start-Sleep 3 # testing only\n\n        if ((get-service -name $service -ComputerName $hostname).Status  -eq \"Running\") {\n            Write-Host \"result_code: 3 (second restart worked)\"\n        } else {\n            Write-Host \"result_code: 4 (second restart failed so probably trigger alert)\"\n        } # end of else line 21\n    } # end of else line 15\n} # end of line 9",
    "scriptType" : "powerShell",
    "windowsCmdline" : "",
    "windowsScript" : ""
  },
  "enableAutoDiscovery" : true,
  "autoDiscoveryConfig" : {
    "persistentInstance" : false,
    "disableInstance" : false,
    "deleteInactiveInstance" : true,
    "instanceAutoGroupMethod" : "none",
    "instanceAutoGroupMethodParams" : "",
    "scheduleInterval" : 0,
    "method" : {
      "name" : "ad_script",
      "type" : "embeded",
      "winScript" : null,
      "winCmdline" : null,
      "linuxCmdline" : null,
      "linuxScript" : null,
      "groovyScript" : "hostProps.get(\"Service_restart.services\").tokenize(\",|\").each{\n    println(\"${it}##${it}\")\n}\nreturn 0"
    },
    "filters" : [ ]
  },
  "dataPoints" : [ {
    "id" : 15694,
    "dataSourceId" : 9263668,
    "name" : "result_code",
    "description" : "1=ok, 2=first restart worked, 3=second worked, 4=second failed so probably alert",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "regex",
    "postProcessorParam" : "result_code: (\\d+)",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 3,
    "alertExpr" : ">= 2 3 4",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15695,
    "dataSourceId" : 9263668,
    "name" : "runtime_ms",
    "description" : "",
    "alertTransitionInterval" : 1,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 4,
    "maxDigits" : 4,
    "postProcessorMethod" : "none",
    "postProcessorParam" : "",
    "rawDataFieldName" : "responseTime",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 3,
    "alertExpr" : "> 11222",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  } ],
  "enableEriDiscovery" : false,
  "eriDiscoveryInterval" : -1,
  "eriDiscoveryConfig" : null
}