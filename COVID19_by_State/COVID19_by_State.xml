<?xml version="1.0" encoding="UTF-8" ?>
<feed  version="1.0" hasPendingRequests="false" >
  <company></company>
  <status>200</status>
  <errmsg>OK</errmsg>
  <interval>0</interval>
    <entry type="predatasource">
        <version>1585233907</version>
        <name>COVID19_by_State</name>
        <displayedas>COVID 19 by State</displayedas>
        <description>Gathers statistics about COVID-19</description>
        <collector>batchscript</collector>
        <hasMultiInstances>true</hasMultiInstances>
        <schedule>180</schedule>
        <appliesTo>finnhub.api.key</appliesTo>
        <wildcardauto>true</wildcardauto>
        <wildcardpersist>false</wildcardpersist>
        <wildcardlinuxscript>ad_script</wildcardlinuxscript>
        <wildcardlinuxcmdline>type=&#34;embeded&#34; </wildcardlinuxcmdline>
        <wildcardwinscript>ad_script</wildcardwinscript>
        <wildcardwincmdline>type=&#34;embeded&#34; </wildcardwincmdline>
        <wildcardgroovyscript>import groovy.json.JsonSlurper
jsondata = new URL(&#34;https://finnhub.io/api/v1/covid19/us?token=${hostProps.get(&#39;finnhub.api.key&#39;)}&#34;).getText()
objectdata = new JsonSlurper().parseText(jsondata)
countries = [
    canada: [&#34;Alberta&#34;,&#34;British Columbia&#34;,&#34;Manitoba&#34;,&#34;New Brunswick&#34;,&#34;Newfoundland and Labrador&#34;,&#34;Northwest Territories&#34;,&#34;Nova Scotia&#34;,&#34;Nunavut&#34;,&#34;Ontario&#34;,&#34;Prince Edward Island&#34;,&#34;Quebec&#34;,&#34;Saskatchewan&#34;,&#34;Yukon&#34;],
    ships: [&#34;Diamond Princess&#34;, &#34;Grand Princess&#34;,&#34;Wuhan Evacuee&#34;]
]

objectdata.each{
  state = it.state.trim()
  if (countries.canada.contains(state)) {country = &#34;Canada&#34;}
  else if (countries.ships.contains(state)) {country = &#34;Other&#34;}
  else country = &#34;US&#34;
  if (state.size() &#62; 0){println(&#34;${state.replaceAll(/[\s,\.]/,&#34;&#34;)}##${state}######country=${country}&#34;)}
}
return 0
</wildcardgroovyscript>
        <wildcardschedule>1440</wildcardschedule>
        <wildcarddisable>false</wildcarddisable>
        <wildcarddeleteinactive>true</wildcarddeleteinactive>
        <agdmethod>ilp</agdmethod>
        <agdparams>auto.country</agdparams>
        <group>_WeenigWare Community</group>
        <tags></tags>
        <technology>Created by Matt Kerfoot

Must have an API key for Finnhub.io. The API key must be saved as a new custom property under the device you want to run this datasource on called, &#34;finnhub.api.key&#34; with the value being the API Key.</technology>
        <adlist><![CDATA[{"agdmethod":"ilp","method":"ad_script","agdparams":"auto.country","id":0,"filters":[{"attribute":"##WILDALIAS##","operation":"RegexNotMatch","value":"##COVID19_by_State.excludeRegex##"},{"attribute":"##WILDALIAS##","operation":"RegexMatch","value":"##COVID19_by_State.includeRegex##"}],"params":{"type":"embeded","groovyscript":"import groovy.json.JsonSlurper\njsondata = new URL(\"https://finnhub.io/api/v1/covid19/us?token=${hostProps.get('finnhub.api.key')}\").getText()\nobjectdata = new JsonSlurper().parseText(jsondata)\ncountries = [\n    canada: [\"Alberta\",\"British Columbia\",\"Manitoba\",\"New Brunswick\",\"Newfoundland and Labrador\",\"Northwest Territories\",\"Nova Scotia\",\"Nunavut\",\"Ontario\",\"Prince Edward Island\",\"Quebec\",\"Saskatchewan\",\"Yukon\"],\n    ships: [\"Diamond Princess\", \"Grand Princess\",\"Wuhan Evacuee\"]\n]\n\nobjectdata.each{\n  state = it.state.trim()\n  if (countries.canada.contains(state)) {country = \"Canada\"}\n  else if (countries.ships.contains(state)) {country = \"Other\"}\n  else country = \"US\"\n  if (state.size() > 0){println(\"${state.replaceAll(/[\\s,\\.]/,\"\")}##${state}######country=${country}\")}\n}\nreturn 0\n"}}]]></adlist>
        <schemaVersion>2</schemaVersion>
        <dataSourceType>1</dataSourceType>
        <attributes>
        <attribute>
            <name>scripttype</name>
            <value>embed</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>scriptgroovy</name>
            <value>import groovy.json.JsonSlurper
jsondata = new URL(&#34;https://finnhub.io/api/v1/covid19/us?token=${hostProps.get(&#39;finnhub.api.key&#39;)}&#34;).getText()
objectdata = new JsonSlurper().parseText(jsondata)
objectdata.each{
  state = it.state.trim()
  if (state.size() &#62; 0){
    println(&#34;${state.replaceAll(/[\s,\.]/,&#34;&#34;)}.deaths: ${it.death}&#34;)
    println(&#34;${state.replaceAll(/[\s,\.]/,&#34;&#34;)}.case: ${it.case}&#34;)
  }
}
return 0</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowsscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxscript</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>windowscmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>linuxcmdline</name>
            <value></value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>__filter_0</name>
            <value>##WILDALIAS##	RegexNotMatch	##COVID19_by_State.excludeRegex##</value>
            <comment></comment>
        </attribute>
        <attribute>
            <name>__filter_1</name>
            <value>##WILDALIAS##	RegexMatch	##COVID19_by_State.includeRegex##</value>
            <comment></comment>
        </attribute>
        </attributes>
        <datapoints>
        <datapoint>
            <name>cases</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.case</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        <datapoint>
            <name>deaths</name>
            <dataType>7</dataType>
            <type>2</type>
            <postprocessormethod>namevalue</postprocessormethod>
            <postprocessorparam>##WILDVALUE##.deaths</postprocessorparam>
            <usevalue>output</usevalue>
            <alertexpr></alertexpr>
            <alertmissing>1</alertmissing>
            <alertsubject></alertsubject>
            <alertbody></alertbody>
            <enableanomalyalertsuppression></enableanomalyalertsuppression>
            <description></description>
            <maxvalue></maxvalue>
            <minvalue></minvalue>
            <userparam1></userparam1>
            <userparam2></userparam2>
            <userparam3></userparam3>
            <iscomposite>false</iscomposite>
            <rpn></rpn>
            <alertTransitionIval>0</alertTransitionIval>
            <alertClearTransitionIval>0</alertClearTransitionIval>
        </datapoint>
        </datapoints>
        <graphs>
        <graph>
            <name>Known Deaths</name>
            <title>Known Deaths</title>
            <verticallabel>count</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>deaths</name>
            <datapointname>deaths</datapointname>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>Deaths</legend>
                <color>red</color>
                <datapointname>deaths</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        <graph>
            <name>Reported Cases</name>
            <title>Reported Cases</title>
            <verticallabel>count</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <graphdatapoints>
        <graphdatapoint>
            <name>cases</name>
            <datapointname>cases</datapointname>
            <cf>1</cf>
        </graphdatapoint>
            </graphdatapoints>
            <graphvirtualdatapoints>
            </graphvirtualdatapoints>
            <graphdatas>
            <graphdata>
                <type>2</type>
                <legend>Cases</legend>
                <color>red</color>
                <datapointname>cases</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
            </graphdata>
            </graphdatas>
        </graph>
        </graphs>
        <overviewgraphs>
        <overviewgraph>
            <name>Known Deaths</name>
            <title>Known Deaths</title>
            <verticallabel>count</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <datapoints>
        <overviewgraphdatapoint>
            <name>dat</name>
            <datapointname>deaths</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>1</type>
                <legend>##INSTANCE##</legend>
                <datapointname>dat</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        <overviewgraph>
            <name>Reported Cases</name>
            <title>Reported Cases</title>
            <verticallabel>count</verticallabel>
            <rigid>false</rigid>
            <maxvalue>NaN</maxvalue>
            <minvalue>0.0</minvalue>
            <displayprio>1</displayprio>
            <timescale>1day</timescale>
            <base1024>false</base1024>
            <aggregated>false</aggregated>
            <datapoints>
        <overviewgraphdatapoint>
            <name>dat</name>
            <datapointname>cases</datapointname>
            <cf>1</cf>
            <aggregateMethod>sum</aggregateMethod>
        </overviewgraphdatapoint>
            </datapoints>
            <virtualdatapoints>
            </virtualdatapoints>
            <lines>
            <overviewgraphline>
                <type>1</type>
                <legend>##INSTANCE##</legend>
                <datapointname>dat</datapointname>
                <isvirtualdatapoint>false</isvirtualdatapoint>
                <color>silver</color>
            </overviewgraphline>
            </lines>
        </overviewgraph>
        </overviewgraphs>
        <scripts>
        </scripts>
    </entry>
</feed>
