{
  "id" : 8063629,
  "description" : "Gives group level count statistics: number of websites",
  "group" : "_WeenigWare Billing",
  "appliesTo" : "billing_api.id && billing_api.pass && billing_api.account",
  "technology" : "Set Auto Discovery filter \"auto.depth <= 1\" to determine which group levels are included. Auto.depth represents the number of levels below the root the group resides.\nTo calculate valid costs, set billing_api.[aws|azure|gcp|resource]_cost properties on the collector where the billing api id, pass, and account are defined or on the instances themselves (if you wanted a different value per instance).\nSupporting documentation can be found at https://stuart.weenig.com/2019/11/counting-resources-per-group.html",
  "tags" : "",
  "checksum" : "c100a779329c504d83fb356482e4dc5b",
  "lineageId" : "cVY_0Pv8Qt6VZLxVzCnkDg",
  "name" : "Website_Group_Member_Counts",
  "displayName" : "Website_Group_Member_Counts",
  "version" : 1579193400,
  "auditVersion" : 0,
  "hasMultiInstances" : true,
  "collectInterval" : 60,
  "collectMethod" : "batchscript",
  "collectorAttribute" : {
    "name" : "batchscript",
    "linuxCmdline" : "",
    "linuxScript" : "",
    "groovyScript" : "/*******************************************************************************\n *  © 2007-2019 - LogicMonitor, Inc. All rights reserved.\n ******************************************************************************/\nimport org.apache.http.client.methods.HttpGet\nimport org.apache.http.impl.client.CloseableHttpClient\nimport org.apache.http.impl.client.HttpClients\nimport org.apache.http.util.EntityUtils\nimport javax.crypto.Mac\nimport javax.crypto.spec.SecretKeySpec\nimport org.apache.commons.codec.binary.Hex\nimport groovy.json.JsonSlurper\n\nCLIENTS_FOLDER_NAME = hostProps.get(\"billing_api.client_path\") ?: \"Fred Hutchinson Devices by Location\"\nBILLING_TYPES_PARENT_FOLDER_NAME = hostProps.get(\"billing_api.types_parent_path\") ?: \"Devices by Billing Type\"\n\naccessId = hostProps.get(\"billing_api.id\")\naccessKey = hostProps.get(\"billing_api.pass\")\naccount = hostProps.get(\"billing_api.account\")\nqueryLimit = hostProps.get(\"billing_api.query_limit\") ? hostProps.get(\"billing_api.query_limit\").toInteger() : 1000\n\ns = new JsonSlurper()\n\ndef LMAPI(_verb, _accessId, _accessKey, _account, _resourcePath, _queryParameters = [:], _data = '') {\n    url = 'https://' + _account + '.logicmonitor.com' + '/santaba/rest/' + _resourcePath\n    if (_queryParameters.size() > 0) {\n        _encodedQueryParameters = []\n        _queryParameters.each{k,v ->\n            _encodedQueryParameters += \"${k}=${java.net.URLEncoder.encode(v)}\"\n        }\n        url += \"?\" + _encodedQueryParameters.join(\"&\")\n    } else {url += \"/\"}\n    epoch = System.currentTimeMillis()\n    requestVars = _verb + epoch + \"/\" + _resourcePath\n    hmac = Mac.getInstance('HmacSHA256')\n    secret = new SecretKeySpec(_accessKey.getBytes(), 'HmacSHA256')\n    hmac.init(secret)\n    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))\n    signature = hmac_signed.bytes.encodeBase64()\n    CloseableHttpClient myHttpClient = HttpClients.createDefault()\n    http_request = new HttpGet(url)\n    http_request.addHeader(\"Authorization\" , \"LMv1 \" + _accessId + \":\" + signature + \":\" + epoch)\n    http_request.setHeader(\"X-Version\", \"2\")\n    response = myHttpClient.execute(http_request)\n    responseBody = EntityUtils.toString(response.getEntity())\n    code = response.getStatusLine().getStatusCode()\n    myHttpClient.close()\n    responseDict = [:]\n    responseDict['code'] = code ?: null\n    responseDict['body'] = responseBody ?: null\n    return responseDict\n}\n\ndef LmGet(String _resourcePath, Map _queryParameters = [:]){return LMAPI(\"GET\", accessId, accessKey, account, _resourcePath, _queryParameters)}\n\n//GET WEBSITE GROUP COUNTS\nqueryParameters = [\n'fields':'id,fullPath,numOfWebsites,numOfDirectWebsites',\n'sort':'+fullPath',\n'size':queryLimit.toString()\n]\nservices_json = LmGet(\"website/groups\",queryParameters)\nservices = s.parseText(services_json.body).items\nservices.each{\n    path = it.fullPath.tokenize(\"/\")\n    println(\"website_${it.id}.numOfWebsites: ${it.numOfWebsites}\")\n    println(\"website_${it.id}.numOfDirectWebsites: ${it.numOfDirectWebsites}\")\n}\n\n\nreturn 0",
    "scriptType" : "embed",
    "windowsCmdline" : "",
    "windowsScript" : ""
  },
  "enableAutoDiscovery" : true,
  "autoDiscoveryConfig" : {
    "persistentInstance" : false,
    "disableInstance" : false,
    "deleteInactiveInstance" : false,
    "instanceAutoGroupMethod" : "none",
    "instanceAutoGroupMethodParams" : "",
    "scheduleInterval" : 15,
    "method" : {
      "name" : "ad_script",
      "type" : "embeded",
      "winScript" : null,
      "winCmdline" : null,
      "linuxCmdline" : null,
      "linuxScript" : null,
      "groovyScript" : "/*******************************************************************************\n *  © 2007-2019 - LogicMonitor, Inc. All rights reserved.\n ******************************************************************************/\nimport org.apache.http.client.methods.HttpGet\nimport org.apache.http.impl.client.CloseableHttpClient\nimport org.apache.http.impl.client.HttpClients\nimport org.apache.http.util.EntityUtils\nimport javax.crypto.Mac\nimport javax.crypto.spec.SecretKeySpec\nimport org.apache.commons.codec.binary.Hex\nimport groovy.json.JsonSlurper\n\naccessId = hostProps.get(\"billing_api.id\")\naccessKey = hostProps.get(\"billing_api.pass\")\naccount = hostProps.get(\"billing_api.account\")\nqueryLimit = hostProps.get(\"billing_api.query_limit\") ? hostProps.get(\"billing_api.query_limit\").toInteger() : 1000\n\ns = new JsonSlurper()\n\ndef LMAPI(_verb, _accessId, _accessKey, _account, _resourcePath, _queryParameters = [:], _data = '') {\n    url = 'https://' + _account + '.logicmonitor.com' + '/santaba/rest/' + _resourcePath\n    if (_queryParameters.size() > 0) {\n        _encodedQueryParameters = []\n        _queryParameters.each{k,v ->\n            _encodedQueryParameters += \"${k}=${java.net.URLEncoder.encode(v)}\"\n        }\n        url += \"?\" + _encodedQueryParameters.join(\"&\")\n    } else {url += \"/\"}\n    epoch = System.currentTimeMillis()\n    requestVars = _verb + epoch + \"/\" + _resourcePath\n    hmac = Mac.getInstance('HmacSHA256')\n    secret = new SecretKeySpec(_accessKey.getBytes(), 'HmacSHA256')\n    hmac.init(secret)\n    hmac_signed = Hex.encodeHexString(hmac.doFinal(requestVars.getBytes()))\n    signature = hmac_signed.bytes.encodeBase64()\n    CloseableHttpClient myHttpClient = HttpClients.createDefault()\n    http_request = new HttpGet(url)\n    http_request.addHeader(\"Authorization\" , \"LMv1 \" + _accessId + \":\" + signature + \":\" + epoch)\n    http_request.setHeader(\"X-Version\", \"2\")\n    response = myHttpClient.execute(http_request)\n    responseBody = EntityUtils.toString(response.getEntity())\n    code = response.getStatusLine().getStatusCode()\n    myHttpClient.close()\n    responseDict = [:]\n    responseDict['code'] = code ?: null\n    responseDict['body'] = responseBody ?: null\n    return responseDict\n}\n\ndef LmGet(String _resourcePath, Map _queryParameters = [:]){\n  return LMAPI(\"GET\", accessId, accessKey, account, _resourcePath, _queryParameters)\n}\n\n//GET WEBSITE GROUP COUNTS\nqueryParameters = [\n  'fields':'id,fullPath,numOfWebsites,numOfDirectWebsites',\n  'sort':'+fullPath',\n  'size':queryLimit.toString()\n]\nservices_json = LmGet(\"website/groups\",queryParameters)\nservices = s.parseText(services_json.body).items\nservices.each{\n    path = it.fullPath.tokenize(\"/\")\n    println(\"website_${it.id}##${(it.fullPath ?: \"(root)\").replaceAll(\"/\",\"-\")}######fullPath=${it.fullPath}&depth=${path.size()}\")\n}\n\nreturn 0\n"
    },
    "filters" : [ {
      "attribute" : "auto.fullPath",
      "operation" : "RegexNotMatch",
      "value" : "Action",
      "comment" : ""
    }, {
      "attribute" : "auto.depth",
      "operation" : "RegexMatch",
      "value" : "2|0",
      "comment" : ""
    } ]
  },
  "dataPoints" : [ {
    "id" : 15645,
    "dataSourceId" : 8063629,
    "name" : "collection_time",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 4,
    "maxDigits" : 4,
    "postProcessorMethod" : "none",
    "postProcessorParam" : "",
    "rawDataFieldName" : "responseTime",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15646,
    "dataSourceId" : 8063629,
    "name" : "numOfDirectWebsites",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.numOfDirectWebsites",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15647,
    "dataSourceId" : 8063629,
    "name" : "numOfWebsites",
    "description" : "Count of all descendants under the group.",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "namevalue",
    "postProcessorParam" : "##WILDVALUE##.numOfWebsites",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15648,
    "dataSourceId" : 8063629,
    "name" : "numOfWebsites_Cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "numOfWebsites * if(un(website_cost),0,website_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15649,
    "dataSourceId" : 8063629,
    "name" : "website_cost",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "##billing_api.website_cost##",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 15663,
    "dataSourceId" : 8063629,
    "name" : "website_cost_display",
    "description" : "",
    "alertTransitionInterval" : 0,
    "alertClearTransitionInterval" : 0,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "expression",
    "postProcessorParam" : "if(un(website_cost),0,website_cost)",
    "rawDataFieldName" : "",
    "maxValue" : "",
    "minValue" : "",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  } ],
  "enableEriDiscovery" : false,
  "eriDiscoveryInterval" : -1,
  "eriDiscoveryConfig" : null
}