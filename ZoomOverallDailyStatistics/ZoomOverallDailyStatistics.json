{
  "id" : 12466909,
  "description" : "By Stefan Wuensch, 2020-03-12. Zoom API collection of daily total usage metrics: New Users, Number of Meetings, Total Participants, and Total Number of Meeting Minutes.",
  "group" : "_WeenigWare",
  "appliesTo" : "zoom_api.key && zoom_api.pass",
  "technology" : "API endpoint docs: https://marketplace.zoom.us/docs/api-reference/zoom-api/reports/reportdaily\nAPI endpoint: https://api.zoom.us/v2/report/daily",
  "tags" : "",
  "checksum" : "ce5a1d172c45cf3b0f1e37a01b6009c9",
  "lineageId" : "wkUydMefSYiOJGStUwEGjQ",
  "name" : "ZoomOverallDailyStatistics",
  "displayName" : "Zoom Overall Daily Statistics",
  "version" : 1585677247,
  "auditVersion" : 0,
  "hasMultiInstances" : false,
  "collectInterval" : 60,
  "collectMethod" : "script",
  "collectorAttribute" : {
    "name" : "script",
    "linuxCmdline" : "",
    "linuxScript" : "",
    "groovyScript" : "import java.util.Base64\nimport javax.crypto.Mac\nimport javax.crypto.spec.SecretKeySpec\nimport com.santaba.agent.groovyapi.http.*\nimport groovy.json.JsonSlurper\nimport groovy.json.JsonOutput\n\nzoom_api_key = hostProps.get(\"zoom_api.key\")\n\nmyKey = generateJWTToken(hostProps.get(\"zoom_api.pass\"))\n\nhttpClient = HTTP.open(\"https://api.zoom.us\", 443)\n\ndef url = \"https://api.zoom.us/v2/report/daily\"\n\ndef headers = [:]\nheaders.put(\"Authorization\", \"Bearer \" + myKey)\nheaders.put(\"Content-Type\",\"application/json\")\nheaders.put(\"User-Agent\", \"Zoom-Jwt-Request\")\n\ndef getResponse = httpClient.get(url,headers)\ndef report = new JsonSlurper().parseText(httpClient.getResponseBody())\n\nprintln(JsonOutput.toJson(report.dates[-1]))\nreturn 0\n\n\npublic String generateJWTToken(String secretKey) throws RuntimeException {\n  /**\n   * Generates a JWT Token as accepted by a service like Zoom. Adjust the header and payload to fit the\n   * service you are interacting with. Be sure to account for all spaces in header/payload! Also token string\n   * is without padding. If you need padding, be sure to remove \"withoutPadding()\" calls.\n   * @param  secretKey  Secret key used during encoding.\n   * @return returns JWT token string based on header, payload and secretKey\n   */\n   String header = \"{\\\"typ\\\":\\\"JWT\\\",\\\"alg\\\":\\\"HS256\\\"}\"\n   String base64UrlHeader = Base64.getUrlEncoder().withoutPadding().encodeToString(header.getBytes())\n\n   // JWT token expires 60 seconds from now\n   long timeSecs = (System.currentTimeMillis() / 1000) + 60\n\n   String payload = \"{\\\"iss\\\":\\\"${zoom_api_key}\\\",\\\"exp\\\":\" + String.valueOf(timeSecs) + \"}\"\n   String base64UrlPayload = Base64.getUrlEncoder().withoutPadding().encodeToString(payload.getBytes())\n\n   try {\n      String base64UrlSignature = hmacEncode(base64UrlHeader + \".\" + base64UrlPayload, secretKey)\n\n      return base64UrlHeader + \".\" + base64UrlPayload + \".\" + base64UrlSignature\n   } catch (Exception e) {\n      throw new RuntimeException(\"Unable to generate a JWT token.\")\n   }\n}\n\nprivate String hmacEncode(String data, String key) throws Exception {\n  /**\n   * Helper method that encodes data using HmacSHA256 and key.\n   * @param  data data to encode\n   * @param  key  Secret key used during encoding.\n   * @return Base64UrlEncoded string without padding\n   */\n   Mac sha256_HMAC = Mac.getInstance(\"HmacSHA256\")\n   SecretKeySpec secret_key = new SecretKeySpec(key.getBytes(), \"HmacSHA256\")\n   sha256_HMAC.init(secret_key)\n\n   return Base64.getUrlEncoder().withoutPadding().encodeToString(sha256_HMAC.doFinal(data.getBytes()))\n}",
    "scriptType" : "embed",
    "windowsCmdline" : "",
    "windowsScript" : ""
  },
  "enableAutoDiscovery" : false,
  "autoDiscoveryConfig" : null,
  "dataPoints" : [ {
    "id" : 17256,
    "dataSourceId" : 12466909,
    "name" : "meeting_minutes",
    "description" : "",
    "alertTransitionInterval" : 3,
    "alertClearTransitionInterval" : 2,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "json",
    "postProcessorParam" : "meeting_minutes",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 17257,
    "dataSourceId" : 12466909,
    "name" : "meetings",
    "description" : "",
    "alertTransitionInterval" : 3,
    "alertClearTransitionInterval" : 2,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "json",
    "postProcessorParam" : "meetings",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 17258,
    "dataSourceId" : 12466909,
    "name" : "new_users",
    "description" : "",
    "alertTransitionInterval" : 3,
    "alertClearTransitionInterval" : 2,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "json",
    "postProcessorParam" : "new_users",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  }, {
    "id" : 17259,
    "dataSourceId" : 12466909,
    "name" : "participants",
    "description" : "",
    "alertTransitionInterval" : 3,
    "alertClearTransitionInterval" : 2,
    "type" : 2,
    "dataType" : 7,
    "maxDigits" : 4,
    "postProcessorMethod" : "json",
    "postProcessorParam" : "participants",
    "rawDataFieldName" : "output",
    "maxValue" : "",
    "minValue" : "0",
    "userParam1" : "",
    "userParam2" : "",
    "userParam3" : "",
    "alertForNoData" : 1,
    "alertExpr" : "",
    "alertExprNote" : "",
    "alertSubject" : "",
    "alertBody" : "",
    "enableAnomalyAlertSuppression" : ""
  } ],
  "enableEriDiscovery" : false,
  "eriDiscoveryInterval" : -1,
  "eriDiscoveryConfig" : null
}